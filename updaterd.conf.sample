-- updaterd.conf  -*- mode: lua -*-

local M = {}

-- Read the named file in under the specified data directory
-- M.data_directory and return the contents.
function read_file(name)
    local f, err = io.open(M.data_directory .. "/" .. name, "r")
    if f == nil then
        return nil
    end
    local r = f:read("*a")
    f:close()
    return r
end


-- set the directory for data and log files
--M.data_directory = arg[0]:match("(.*/)")  -- dir from configuration file
--M.data_directory = "."                    -- current directory
M.data_directory = "/var/lib/updaterd/"    -- absolute path


-- optional pid file if not absolute path then is created relative to
-- the data directory
--M.pidfile = "bitmarkd.pid"

-- select the chain of the network for peer connections
-- cross chain networking connects will not work
--M.chain = "bitmark"
--M.chain = "testing"
M.chain = "local"


-- peer-to-peer connections
M.peering = {
    public_key = read_file("updaterd.public"),
    private_key = read_file("updaterd.private"),

    -- dedicated connections

    node = {
        -- more connect entries
    }
}


M.database = {
    -- name of the database to connect to
    database = "@CHANGE-TO-DBNAME",
    -- user to sign in as
    user = "updaterd",
    -- user's password, for secure passsword, use: pwgen -n -1 64 1
    password = "@CHANGE-TO-SECURE-PASSWORD@",
    -- host to connect to (default is localhost)
    -- values that start with / are directory of unix domain socket
    -- (directory must contain the Postgresql socket: ".s.PGSQL.5432"
    --  on FreeBSD use: "/tmp"
    --  on Ubuntu use:  "/run/postgresql")
    host = "",
    -- port to bind to (default is 5432)
    port = "",
    -- whether or not to use SSL (default is require, this is not the default for libpq)
    sslmode = "disable",
    -- maximum wait for connection, in seconds. Zero or not specified means wait indefinitely.
    timeout = 0,
    -- cert file location, file must contain PEM encoded data
    sslcert = "",
    -- key file location, file must contain PEM encoded data
    sslkey = "",
    -- location of the root certificate file, file must contain PEM encoded data
    sslrootcert = ""
}


-- configure global or specific logger channel levels
M.logging = {
    size = 1048576,
    count = 100,

    -- set to true to log to console
    console = false,

    -- set the logging level for various modules
    -- modules not overridden with get the value from DEFAULT
    -- the default value for DEFAULT is "critical"
    levels = {
        DEFAULT = "info",
    }
}


-- return the complete configuration
return M
